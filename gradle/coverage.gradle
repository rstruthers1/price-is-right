apply plugin: 'jacoco' // Code Coverage Report Generation

// Code coverage plugin configuration
ext {
    limits = [
            'instruction': 0,
            'branch'     : 0,
            'line'       : 0,
            'complexity' : 0,
            'method'     : 0,
            'class'      : 0
    ]
}

jacocoTestReport {
    reports {
        //XML required by coveralls and for the below coverage checks
        xml.enabled true
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['com/myRetail/products/api/model/**',
                              'com/myRetail/products/cassandra/domain/**',
                              'com/myRetail/products/config/**',
                              'com/myRetail/products/exceptions/**',
                              '**/ProductsApplication**'])
        })
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        logger.quiet("---------------------------------------------------------------")
        metrics.each {
            def limit = limits[it.key]
            def line = "- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%"
            logger.quiet(line)
            if (it.value < limit) {
                failures.add(line)
            }
        }

        if (failures) {
            def testMainUrl = file("${jacoco.reportsDir}/test/html/index.html")
            logger.quiet("Code Coverage Failed")
            logger.quiet("View Coverage Report at ${testMainUrl}")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
        }
        logger.quiet("---------------------------------------------------------------")
    }
}
check.dependsOn jacocoTestReport